 THIS IS REACT SHOPPING CART PROJECT, WHERE CRUD FUNCTIONALITIES PRESENT USEING CONTEXT. ðŸŒŸðŸ›’

 1.Install the React Application and configured the tailwaindcss.
 2.Changes in tailwaind.config.js file. 
 3.In Src foleder Create a Component folder and to store some components
       â†ª Component
         â†ª Header.js
         â†ª Footer.js
         â†ª Hero.js
         â†ª Hero.js
         â†ª Product.js
         â†ª Sidebar.js
         â†ª Sidebar.js
         â†ª Cartitem.js

 4.After that In Src foleder Create another folder --> pages
    â†ª Pages
       â†ª Home.js
       â†ª ProductDetails.js

5.Then In Src foleder Create another folder --> contexts
    â†ª contexts
     â†ª CartContext.js
     â†ª ProductContext.js
     â†ª SidebarContext.js

6.Then a IMG folder to store some images 
7.In ProductContext page change the Component name to ProductProvider then  create a context name ProductContext.
8.And Wrap the JSX to <ProductContext> <Home/></ProductContext> Like that.
9.And also in index.js wrap the whole thing into <ProductProvider> Like that</ProductProvider>.
10.In ProductContext page create a useState variable called Products and then fetch the Products data 
   from FakeStoreAPI and pass the result to setProducts.
11.Then Wrap the JSX into ProductContext.Provider and inside that pass the {Children} and also 
   pass the value Product, 
   Ex:- <ProductContext.Provider value={products}>{children}</ProductContext.Provider>
12.Then come Back to index.js file wrap the whole jsx into <ProductProvider>.
13.Come back to Home Page,In Home page, get the products value by the use of useContext and
   pass the value ProductContext in useContext.
14.then Filterd the products, filtering bec, we want to Show only men's Clothing and Women's Clothing products.
15.After thats i map on the filterdsProducts and Pass the <Product> Component and 
   also pass the filterdsProducts data as a Prop.
16.In Product Component, Destructure the filterdsProducts and pass it to the Component to make a Card.

17.Then ComeBack to the <SidebarContext> component, inside that create SidebarContext using createContext and 
   then create a sidebar state [isOpen, setIsOpen ] and then create a handleClose button.
18.Then Wrap the JSX into SidebarContext.Provider and inside that pass the {Children} and also 
   pass the 3 values isOpen, setIsOpen and handleClose function.
   Ex:-<SidebarContext.Provider value={{ isOpen, setIsOpen, handleClose }}>
      {children}
    </SidebarContext.Provider>
19.Then come Back to index.js file wrap the whole jsx into <SidebarProvider>.
20.Come back to sidebar.js Component inside that get the values isOpen and handleClose using useContext and 
   inside the useContext pass the SidebarContext, then styling the Sidebar page.
21.Implement the sidebar Open/Close functionality apply the handleClose function into the arraW icon.
22.Then Jump to CartContext and change the Component name to CartProvider then  create a context name CartContext.
23.And wrap the JSX into <CartContext.Provider>{clildren}</CartContext.Provider
24.Then come Back to index.js file wrap the whole jsx into <CartProvider>
25.Come back to CartContext.js Component inside that create a state variable name : cart, setCart.
26.Create a function --> addToCart which will be applied on Plus icon.
27.Inside the addToCrt function create a variable --> newItem where spread the Product Object and
   along with that add a new Property --> amounnt:1
27.then add the find functionality in cart that if the is already in the cart or not, 
   if present then create functionality to add the item in Cartitem after that pass the addToCart function at the CartContext value.
28.come back to Product Page and Destructure the addToCart function by the useContext. 
   and pass it to the Plus button.
29.then come back to Sidebar Page and Destructure the cart state by the useContext, 
   and apply the map method on the CartItem.
30.In CartItem page, Destructure the products Properties, write the jsx 
   for --> Image, title, remove icon, quantity, price, increse and decrese amount , final Price.
31.Now in CartContext page before we Implement the addToCart functionality and we will be Implement
   remove from the cart, amount incresed, amount decresed after complete the functionality i will be pass through the CartContext value.
32.Then ComeBack to CartItem page import the values from CartContext through the useContext 
   and pass it to the icon as a eventListner.
33.Then ComeBack to Sidebar page Create a section for display the total price and Clear the Cart.
34.Then ComeBack to CartContext make the functionality for the total Price and Clear Cart function.
35.For the clearCart functionality make clearCart function and pass it to the CartContext value, 
   after that for the total Price , create itemAmount, setItemAmount state, then using useEffeft create the functionality for totalPrice and pass it to teh CartContext value.
36.Then comeBack to Header Design the Header and display the itemAmount which is imported from the CartContext.
    as well as import the Logo of Header.

37.Now it's time to style the Hero.js page  

38.So ComeBack to Home page and pass the Hero component, then go back to Hero page 
   and style them to make more Elegente.
39.now in Sidebar component add two section for view cart and Checkout 

40.Now it's time to build ProductDetails Page.
41.First - in ProductDetails page get the product id using useParams, then get the product Object from ProductContext using
   useContext, then get the addToCart functionality from the CartContext using useContext.
42.then find the product using the Product id. then create a functionality for //if product not found
43.then Destructure the products Properties, then style the ProductDetails page and pass the Properties.

44.Now style the Footer page.
45.Create a the Footer page and style the Footer.
46.After that in come to Sidebar page and make some changes, 
   if cart there is no cart item then it will show "Your Cart is Empty"

 
